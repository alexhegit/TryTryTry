/**
 * OpenCV SimpleBlobDetector Example
 *
 * Copyright 2015 by Satya Mallick <spmallick@gmail.com>
 *
 */

#include "opencv2/opencv.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
#include "ResizeConfig.h"

using namespace cv;
using namespace std;

string type2str(int type) {
    string r;

    uchar depth = type & CV_MAT_DEPTH_MASK;

    switch ( depth ) {
        case CV_8U:  r = "8U"; break;
        case CV_8S:  r = "8S"; break;
        case CV_16U: r = "16U"; break;
        case CV_16S: r = "16S"; break;
        case CV_32S: r = "32S"; break;
        case CV_32F: r = "32F"; break;
        case CV_64F: r = "64F"; break;
        default:     r = "User"; break;
    }

    return r;
}


int main( int argc, char** argv )
{
    Mat im, om;
    double e1, e2, t;
#if 0
    // Read 8-bit grayscale image
    Mat im = imread("earth-16-bit-per-channel.png", IMREAD_GRAYSCALE);
    cout << "flags : IMREAD_GRAYSCALE" << endl;
    cout << "Number of Channels : " << im.channels() << ", depth : " << type2str(im.depth()) << endl << endl;

    // Read 8-bit color image
    im =  imread("earth-16-bit-per-channel.png", IMREAD_COLOR);
    cout <<  "flags : IMREAD_COLOR" << endl;
    cout << "Number of Channels : " << im.channels() << ", depth : " << type2str(im.depth()) << endl << endl;
#endif

#if 0
    // Read 16-bit color image
    im = imread("earth-16-bit-per-channel.png", IMREAD_ANYCOLOR | IMREAD_ANYDEPTH );
    cout <<  "flags :  IMREAD_ANYCOLOR | IMREAD_ANYDEPTH" << endl;
    cout << "Number of Channels : " << im.channels() << ", depth : " << type2str(im.depth()) << endl << endl;
#endif

    // Read transparent PNG / TIFF image
    im = imread("earth-16-bit-per-channel.png", IMREAD_UNCHANGED);
    cout << "flags : IMREAD_UNCHANGED" << endl;
    cout << "Number of Channels : " << im.channels() << ", depth : " << type2str(im.depth()) << endl << endl;

    printf("Resize to 224x224\n");
    // Resize
    im = imread("t_1600x1200.jpg", IMREAD_UNCHANGED);
    om = Mat(Size(224, 224), CV_8UC1);

    e1 = (double)getTickCount();
    //resize(im, om, cvSize(224, 224));
    resize(im, om, cvSize(224, 224), 0, 0, INTER_LINEAR);
    e2 = (double)getTickCount();
    t = (e2 - e1)*1000/getTickFrequency();
    printf("t_1600x1200.jpg resize time =%g ms\n", t);

    im = imread("t_1024x768.png", IMREAD_UNCHANGED);
    om = Mat(Size(224, 224), CV_8UC1);

    e1 = (double)getTickCount();
    //resize(im, om, cvSize(224, 224));
    resize(im, om, cvSize(224, 224), 0, 0, INTER_LINEAR);
    e2 = (double)getTickCount();
    t = (e2 - e1)*1000/getTickFrequency();
    printf("t_1024x768.png resize time =%g ms\n", t);

    im = imread("t_640x480.jpg", IMREAD_UNCHANGED);
    om = Mat(Size(224, 224), CV_8UC1);

    e1 = (double)getTickCount();
    //resize(im, om, cvSize(224, 224));
    resize(im, om, cvSize(224, 224), 0, 0, INTER_LINEAR);
    e2 = (double)getTickCount();
    t = (e2 - e1)*1000/getTickFrequency();
    printf("t_640x480.jpg resize time =%g ms\n", t);

    im = imread("t_240x180.jpg", IMREAD_UNCHANGED);
    om = Mat(Size(224, 224), CV_8UC1);

    e1 = (double)getTickCount();
    //resize(im, om, cvSize(224, 224));
    resize(im, om, cvSize(224, 224), 0, 0, INTER_LINEAR);
    e2 = (double)getTickCount();
    t = (e2 - e1)*1000/getTickFrequency();
    printf("t_240x180.jpg resize time =%g ms\n", t);


    namedWindow("Display Image", WINDOW_AUTOSIZE);
    imshow("Display Image", om);
    waitKey(0);

    return 0;
}
